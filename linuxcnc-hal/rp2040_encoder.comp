component rp2040_encoder "RP2040 USB quadrature encoder interface";
author "Claude";
license "GPL";

pin out float position-#[4] "Position values from the RP2040 device";
pin out bit connected "True when USB device is connected";
pin in s32 test-mode "Test mode: 0=off, 1=sine wave, 2=circular, 3=linear ramp, 4=random walk";
pin in float scale-#[4] = "Scale factor for each encoder";
pin in u32 reset-#[4] "Reset encoder position to zero (change in value triggered)";

option userspace yes;
option extra_link_args "-lusb-1.0";

;;

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <libusb-1.0/libusb.h>
#include <string.h>
#include <errno.h>
#include <signal.h>
#include <math.h>
#include <time.h>

#define VENDOR_ID 0x2E8A
#define PRODUCT_ID 0xC0DE
#define EP_IN 0x81
#define EP_OUT 0x01

#define VENDOR_REQUEST_GET_POSITION 0x01
#define VENDOR_REQUEST_SET_TEST_MODE 0x02
#define VENDOR_REQUEST_SET_SCALE 0x03
#define VENDOR_REQUEST_GET_SCALE 0x04
#define VENDOR_REQUEST_RESET_POSITION 0x05

// Sentinel values for data validation
#define POSITION_DATA_SENTINEL 0x3F8A7C91
#define SCALE_DATA_SENTINEL 0x7B2D4E8F

static libusb_device_handle *dev_handle = NULL;
static libusb_context *ctx = NULL;
static int should_exit = 0;
static int last_test_mode = -1;
static double last_scale[4] = {-1e30, -1e30, -1e30, -1e30};
static int last_reset[4] = {0, 0, 0, 0};
static double invalid_scale_value = -1e30;

static double position_multiplier = -1.0;

static void signal_handler(int /*sig*/) {
    should_exit = 1;
}

static void cleanup_usb(void) {
    if (dev_handle) {
        libusb_release_interface(dev_handle, 0);
        libusb_close(dev_handle);
    }
    
    if (ctx) {
        libusb_exit(ctx);
    }
}

static int init_usb(void) {
    int r;
    
    // Initialize libusb
    r = libusb_init(&ctx);
    if (r < 0) {
        rtapi_print_msg(RTAPI_MSG_ERR, "rp2040_encoder: Failed to initialize libusb\n");
        return -1;
    }
    
    return 0;
}

void user_mainloop(void) {
    uint8_t buffer[64];
    int actual_length;
    int r;
    static int usb_initialized = 0;
    static int startup_message_shown = 0;
    
    // Show startup message on first call
    if (!startup_message_shown) {
        printf("rp2040_encoder: RP2040 USB Quadrature Encoder Interface starting up\n");
        printf("rp2040_encoder: Looking for device VID:0x%04X PID:0x%04X\n", VENDOR_ID, PRODUCT_ID);
        fflush(stdout);
        startup_message_shown = 1;
    }
    
    // Initialize USB on first call
    if (!usb_initialized) {
        if (init_usb() < 0) {
            return;
        }
        usb_initialized = 1;
        printf("rp2040_encoder: USB subsystem initialized\n");
        fflush(stdout);
        
        // Set up signal handlers for cleanup
        signal(SIGINT, signal_handler);
        signal(SIGTERM, signal_handler);
    }
    
    while (!should_exit) {
        FOR_ALL_INSTS() {
            
            // Try to open device if not connected
            if (!dev_handle) {
                dev_handle = libusb_open_device_with_vid_pid(ctx, VENDOR_ID, PRODUCT_ID);
                if (dev_handle) {
                    // Claim interface
                    r = libusb_claim_interface(dev_handle, 0);
                    if (r < 0) {
                        rtapi_print_msg(RTAPI_MSG_ERR, "rp2040_encoder: Failed to claim interface\n");
                        libusb_close(dev_handle);
                        dev_handle = NULL;
                    } else {
                        printf("rp2040_encoder: Device connected and ready\n");
                        fflush(stdout);
                        
                        // Reset test mode tracking to force resend
                        last_test_mode = -1;
                        
                        // Reset scale tracking to trigger initial read
                        for (int i = 0; i < 4; i++) {
                            last_scale[i] = invalid_scale_value;
                        }
                        
                        // Give device time to initialize
                        usleep(2000000); // 2 second delay
                        connected = 1;
                    }
                } else {
                    connected = 0;
                }
            }
            
            if (dev_handle) {
                if (scale(0) <= invalid_scale_value || last_scale[0] <= invalid_scale_value) {
                    buffer[0] = VENDOR_REQUEST_GET_SCALE;
                    actual_length = 0;
                    r = libusb_bulk_transfer(dev_handle, EP_OUT, buffer, 1, &actual_length, 100);
                    if (r == 0) {
                        r = libusb_bulk_transfer(dev_handle, EP_IN, buffer, sizeof(buffer), &actual_length, 100);
                        if (r == 0 && actual_length >= 36) {
                            // Validate sentinel first
                            uint32_t *sentinel_ptr = (uint32_t*)buffer;
                            if (*sentinel_ptr == SCALE_DATA_SENTINEL) {
                                // Extract scale data after sentinel (4 bytes)
                                double *scales = (double*)(buffer + 4);
                                for (int i = 0; i < 4; i++) {
                                    scale(i) = scales[i];
                                    last_scale[i] = scales[i];
                                }
                            }
                        }
                    }
                } else {
                    if (test_mode != last_test_mode && test_mode >= 0 && test_mode <= 4) {
                        buffer[0] = VENDOR_REQUEST_SET_TEST_MODE;
                        buffer[1] = test_mode;  // 0=off, 1-4=test patterns
                        r = libusb_bulk_transfer(dev_handle, EP_OUT, buffer, 2, &actual_length, 100);
                        if (r == 0) {
                            last_test_mode = test_mode;
                        }
                    }
                    
                    // Check for scale factor changes
                    for (int i = 0; i < 4; i++) {
                        if (scale(i) > invalid_scale_value && scale(i) != last_scale[i]) {
                            buffer[0] = VENDOR_REQUEST_SET_SCALE;
                            buffer[1] = i;  // Encoder index
                            double scale_value = scale(i);
                            memcpy(&buffer[2], &scale_value, sizeof(double));
                            r = libusb_bulk_transfer(dev_handle, EP_OUT, buffer, 10, &actual_length, 100);
                            if (r == 0) {
                                last_scale[i] = scale(i);
                            }
                        }
                    }
                    
                    for (int i = 0; i < 4; i++) {
                        if (reset(i) != last_reset[i]) {
                            buffer[0] = VENDOR_REQUEST_RESET_POSITION;
                            buffer[1] = i;  // Encoder index
                            r = libusb_bulk_transfer(dev_handle, EP_OUT, buffer, 2, &actual_length, 100);
                        }
                        last_reset[i] = reset(i);
                    }
                    
                    
                    // Send position request
                    buffer[0] = VENDOR_REQUEST_GET_POSITION;
                    r = libusb_bulk_transfer(dev_handle, EP_OUT, buffer, 1, &actual_length, 100);
                    if (r == 0) {
                        usleep(10);
                        // Read position response
                        r = libusb_bulk_transfer(dev_handle, EP_IN, buffer, 64, &actual_length, 100);
                        if (r == 0 && actual_length >= 36) {
                            // Validate sentinel first
                            uint32_t *sentinel_ptr = (uint32_t*)buffer;
                            if (*sentinel_ptr == POSITION_DATA_SENTINEL) {
                                // Extract position data after sentinel (4 bytes)
                                double *positions = (double*)(buffer + 4);
                                position(0) = position_multiplier * positions[0];
                                position(1) = position_multiplier * positions[1];
                                position(2) = position_multiplier * positions[2];
                                position(3) = position_multiplier * positions[3];
                            }
                        } else if (r == LIBUSB_ERROR_TIMEOUT) {
                            printf("rp2040_encoder: LIBUSB_ERROR_TIMEOUT\n");
                            // No response yet, continue with last known positions
                        } else if (r == LIBUSB_ERROR_NO_DEVICE || r == LIBUSB_ERROR_IO) {
                            printf("rp2040_encoder: LIBUSB_ERROR_NO_DEVICE || LIBUSB_ERROR_IO\n");
                            // Device disconnected
                            libusb_close(dev_handle);
                            dev_handle = NULL;
                            connected = 0;
                        }
                    } else if (r == LIBUSB_ERROR_NO_DEVICE || r == LIBUSB_ERROR_IO) {
                        printf("rp2040_encoder: LIBUSB_ERROR_NO_DEVICE || LIBUSB_ERROR_IO\n");
                        // Device disconnected
                        libusb_close(dev_handle);
                        dev_handle = NULL;
                        connected = 0;
                    }
                }
            }
        }
        
        usleep(1000); // 1000Î¼s sleep
    }
    
    // Clean up on exit
    cleanup_usb();
}
