component pico_dro "Raspberry Pi Pico USB DRO interface";
author "Claude";
license "GPL";

pin out float position-#[4] "Position values from the Pico device";
pin out bit connected "True when USB device is connected";

option userspace yes;
option extra_setup yes;

;;

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <libusb-1.0/libusb.h>
#include <string.h>
#include <errno.h>

#define VENDOR_ID 0x2E8A
#define PRODUCT_ID 0x10DF
#define EP_IN 0x81
#define EP_OUT 0x01

#define VENDOR_REQUEST_GET_POSITION 0x01
#define VENDOR_REQUEST_START_STREAM 0x02
#define VENDOR_REQUEST_STOP_STREAM 0x03

static libusb_device_handle *dev_handle = NULL;
static libusb_context *ctx = NULL;

int extra_setup(void) {
    int r;
    
    // Initialize libusb
    r = libusb_init(&ctx);
    if (r < 0) {
        rtapi_print_msg(RTAPI_MSG_ERR, "pico_dro: Failed to initialize libusb\n");
        return -1;
    }
    
    return 0;
}

void user_mainloop(void) {
    uint8_t buffer[64];
    int actual_length;
    int r;
    
    while (1) {
        FOR_ALL_INSTS() {
            // Try to open device if not connected
            if (!dev_handle) {
                dev_handle = libusb_open_device_with_vid_pid(ctx, VENDOR_ID, PRODUCT_ID);
                if (dev_handle) {
                    // Claim interface
                    r = libusb_claim_interface(dev_handle, 0);
                    if (r < 0) {
                        rtapi_print_msg(RTAPI_MSG_ERR, "pico_dro: Failed to claim interface\n");
                        libusb_close(dev_handle);
                        dev_handle = NULL;
                    } else {
                        connected = 1;
                        // Start streaming
                        buffer[0] = VENDOR_REQUEST_START_STREAM;
                        libusb_bulk_transfer(dev_handle, EP_OUT, buffer, 1, &actual_length, 100);
                    }
                } else {
                    connected = 0;
                }
            }
            
            // Read position data if connected
            if (dev_handle) {
                r = libusb_bulk_transfer(dev_handle, EP_IN, buffer, 64, &actual_length, 10);
                if (r == 0 && actual_length >= 32) {
                    // Parse position data
                    double *positions = (double*)buffer;
                    position(0) = positions[0];
                    position(1) = positions[1];
                    position(2) = positions[2];
                    position(3) = positions[3];
                } else if (r == LIBUSB_ERROR_NO_DEVICE || r == LIBUSB_ERROR_IO) {
                    // Device disconnected
                    libusb_close(dev_handle);
                    dev_handle = NULL;
                    connected = 0;
                }
            }
        }
        
        usleep(1000); // 1ms sleep
    }
}

void rtapi_app_exit(void) {
    if (dev_handle) {
        // Stop streaming
        uint8_t buffer[1] = {VENDOR_REQUEST_STOP_STREAM};
        int actual_length;
        libusb_bulk_transfer(dev_handle, EP_OUT, buffer, 1, &actual_length, 100);
        
        libusb_release_interface(dev_handle, 0);
        libusb_close(dev_handle);
    }
    
    if (ctx) {
        libusb_exit(ctx);
    }
}