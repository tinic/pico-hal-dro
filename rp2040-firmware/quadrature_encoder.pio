;

.program quadrature_encoder

; Jump table at address 0
.origin 0
    jmp delta0      ; 00-00
    jmp minus1      ; 00-01
    jmp plus1       ; 00-10
    jmp delta0      ; 00-11
    jmp plus1       ; 01-00
    jmp delta0      ; 01-01
    jmp delta0      ; 01-10
    jmp minus1      ; 01-11
    jmp minus1      ; 10-00
    jmp delta0      ; 10-01
    jmp delta0      ; 10-10
    jmp plus1       ; 10-11
    jmp delta0      ; 11-00
    jmp plus1       ; 11-01
    jmp minus1      ; 11-10
    jmp delta0      ; 11-11

.wrap_target
delta0:
public start:
    mov isr, null
    in y, 2
    mov y, pins
    in y, 2
    mov pc, isr
minus1:
    jmp x-- output
    jmp output
plus1:
    mov x, ~x
    jmp x-- next2
next2:
    mov x, ~x
output:
    mov isr, x
    push noblock
.wrap


% c-sdk {
#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void quadrature_encoder_program_init(PIO pio, uint sm, uint offset, uint pin, int max_step_rate)
{
    // Configure pins as inputs with pull-ups
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);
    gpio_set_pulls(pin, false, false);     // Enable pull-up, disable pull-down
    gpio_set_pulls(pin + 1, false, false); // Enable pull-up, disable pull-down

    pio_sm_config c = quadrature_encoder_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin);
    
    // Configure IN shifting: shift left, no autopush
    sm_config_set_in_shift(&c, false, false, 32);
    
    // Don't join FIFOs
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);

    // Clock divider - we want to sample fast enough for the encoders
    if (max_step_rate == 0) {
        sm_config_set_clkdiv(&c, 1.0);
    } else {
        // Sample at least 10x faster than max step rate to avoid missing steps
        float div = (float)clock_get_hz(clk_sys) / (10 * max_step_rate);
        sm_config_set_clkdiv(&c, div);
    }

    pio_sm_init(pio, sm, offset, &c);
    
    // Initialize X register to 0 (our counter)
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, 0));
    
    // Initialize Y with current pin state
    pio_sm_exec(pio, sm, pio_encode_mov(pio_y, pio_pins));
    
    // Clear ISR
    pio_sm_exec(pio, sm, pio_encode_mov(pio_isr, pio_null));
    
    pio_sm_set_enabled(pio, sm, true);
} 

// This is just a placeholder - actual implementation is in quadrature_encoder.cpp
// to access the last_positions array
static inline int32_t quadrature_encoder_get_count(PIO pio, uint sm)
{
    // This should not be called directly - use QuadratureEncoder::get_count instead
    return 0;
}

// These functions are kept for compatibility but modified for the new implementation
static inline void quadrature_encoder_request_count(PIO pio, uint sm)
{
    // Not needed - PIO continuously pushes counts
}

static inline int32_t quadrature_encoder_fetch_count(PIO pio, uint sm)
{
    return quadrature_encoder_get_count(pio, sm);
}
%}